#!/bin/bash

### BEGIN INIT INFO
# Provides:          onxsd
# Required-Start:
# Required-Stop:
# Default-Start:     2 3 4 5
# Default-Stop:
# Short-Description: onx storage device service
# Description:       Automatically detect, configure and mount storage devices.
### END INIT INFO

ONXSD_VER="1.0.1"
GITHUB_RAW_URL="https://raw.githubusercontent.com/optimanetworks/onx/main/config/onxsd"
MIN_SIZE_GiB=465 # Minimum disk size is 512GB/465GiB

SELF_UPDATE () {
    echo "Updating script from GitHub repository..."
    wget --spider "$GITHUB_RAW_URL" ||
        echo "Couldn't reach github URL."
    curl -sSL "$GITHUB_RAW_URL" -o /usr/local/bin/onxsd &&
        (chmod +x /usr/local/bin/onxsd; echo "Self update finished.";) ||
        echo "Self update failed."
}

PARTITION_DISK () {
    local DISK="$1"
    
    echo "Partitioning and formatting $DISK."
    
    # Wipe filesystem signatures from disk.
    wipefs -af "$DISK" &&
        echo "Wiped filesystem signatures from $DISK." ||
        echo "Failed to wipe filesystem signatures from $DISK."
        
    # Create partition table on disk.
    if parted "$DISK" --script mktable gpt; then
        echo "Wrote GUID Partition Table to $DISK."
    else
        echo "Failed to write GUID Partition Table to $DISK."
        return
    fi
    
    # Create partition on disk.
    if parted -a minimal "$DISK" --script mkpart primary ext4 1MiB 100%; then
        echo "Created partition on $DISK."
    else
        echo "Failed to create partition on $DISK."
        return
    fi
    
    sleep 3
    
    # Write filesystem to partition.
    if mkfs.ext4 -F "$DISK"1; then
        echo "Wrote ext4 filesystem to ${DISK}1."
    else
        echo "Failed to write filesystem to ${DISK}1."
        return
    fi
    
    local SERIAL=$(smartctl -ij $DISK | jq -r .'serial_number')
    local UUID=$(blkid -s UUID -o value "$DISK"1)
    
    if [ "$SERIAL" == "null" ]; then
        local MOUNTPOINT="/mnt/Media/$UUID"
    else
        local MOUNTPOINT="/mnt/Media/$SERIAL"
    fi
    
    mkdir -p "$MOUNTPOINT"
    
    echo "UUID=${UUID} ${MOUNTPOINT} auto defaults,nofail,errors=continue 0 0" >> /etc/fstab
}

ALIGN_CHECK () {
    local DISK="$1"
    local PART="1"
    parted "$DISK" --script align-check min "$PART"
}

UUID_IN_FSTAB () {
    local UUID="$1"
    grep -q "UUID=${UUID}" /etc/fstab
}

IS_MOUNTED () {
    local PART="$1"
    mount | grep -q "^${PART} "
}

CHECK_DISK () {
    local DISK="$1"
    local SIZE_B=$(lsblk -b -dn -o SIZE $DISK)
    local SIZE_GiB=$((SIZE_B / 1024 / 1024 / 1024))
    
    # Skip storage devices with a storage capacity lower than 512GB
    if (( SIZE_GiB < MIN_SIZE_GiB)); then
        echo "[$DISK] Disk capacity less than 512GB, skipping..."
        return
    fi
    
    local PARTS=($(ls "$DISK"? 2> /dev/null))
    
    if [ ${#PARTS[@]} -eq 0 ]; then
        # If the disk contains less or more than 1 partition, partition and format disk.
        PARTITION_DISK $DISK
    elif [ ${#PARTS[@]} -gt 1 ]; then
        for P in ${PARTS[@]}; do
            IS_MOUNTED $P &&
                (echo "$P is mounted, skipping disk."; return;)
        done
    else
        local PART=${PARTS[0]}
        local FS_TYPE=$(lsblk -f -n -o FSTYPE $PART)
        
        if ! ALIGN_CHECK $DISK; then
            # If the partition is not properly aligned, repartition and format disk.
            PARTITION_DISK $DISK
        elif [ "$FS_TYPE" != "ext4" ]; then
            # If the partition does not contain an ext4 filesystem, repartition and format disk.
            PARTITION_DISK $DISK
        else
            if IS_MOUNTED $PART; then
                # If partition is mounted, perform read-only filesystem check.
                e2fsck -n $PART
            else
                local UUID=$(blkid -s UUID -o value $PART)
                if UUID_IN_FSTAB $UUID; then
                    # If filesystem UUID is found in fstab, perform filesystem check and force repair.
                    e2fsck -yf $PART
                else
                    # If filesystem UUID is not found in fstab, repartition and format disk.
                    PARTITION_DISK $DISK
                fi
            fi
        fi
    fi
}

# Check for update parameter.
if [[ "$1" == "--update" ]]; then
    SELF_UPDATE
    exit 0
fi

# Run for every detected SATA disk.
for DISK in $(ls /dev/sd? 2>/dev/null); do
    CHECK_DISK $DISK
done

mount -av

exit 0

